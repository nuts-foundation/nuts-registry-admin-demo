openapi: 3.0.0
info:
  title: Nuts Registry Admin API
  version: 1.0.0

paths:
  /web/auth:
    post:
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionRequest"
      responses:
        '200':
          description: A session was succesfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSessionResponse"
        '403':
          description: Invalid credentials

  /web/private:
    get:
      description: Checks whether the current session is valid. If not, the client should authenticate before calling other API operations.
      operationId: checkSession
      responses:
        '204':
          description: The session is valid.
        '400':
          description: The session is invalid.

  /web/private/customers:
    get:
      operationId: getCustomers
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomersResponse"
    post:
      operationId: connectCustomer
      description: Connect an existing customer ID to a new Nuts DID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        200:
          description: The newly connected customer.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
  /web/private/customers/{id}:
    parameters:
      - name: id
        in: path
        description: internal customer id
        required: true
        example:
          - 1
        schema:
          type: integer
    get:
      operationId: getCustomer
      responses:
        200:
          description: when all was fine
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
    put:
      operationId: updateCustomer
      description: Update a customers name and activation status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        200:
          description: when all was fine
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"

  /web/private/customers/{id}/services:
    parameters:
      - name: id
        in: path
        description: internal customer id
        required: true
        example:
          - 1
        schema:
          type: integer
    get:
      operationId: getServicesForCustomer
      responses:
        200:
          description: A list of services enabled for this customer.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Services"
    post:
      operationId: enableCustomerService
      description: |
        Enable a service for a customer by adding a reference to a service.
        This allows for administring the compound service on the Saas provider and referencing the service from the customer.
        Note that there can only be one service of the same type per customer DID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - did
              properties:
                type:
                  type: string
                  example: "eOverdracht"
                did:
                  type: string
                  example: "did:nuts:123"
                  description: The did wich contains the referenced service.
      responses:
        200:
          description: After the ref is succesfully added, it returns the a DID service
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"

  /web/private/customers/{id}/services/{type}:
    parameters:
      - name: id
        in: path
        description: internal customer id
        required: true
        example:
          - 1
        schema:
          type: integer
      - name: type
        in: path
        description: The type of the service
        required: true
        example:
          - "eOverdracht"
        schema:
          type: string
    delete:
      operationId: disableCustomerService
      responses:
        204:
          description: Succesfully removed service

  /web/private/organizations:
    post:
      operationId: searchOrganizations
      description: Searches for organizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - city
              properties:
                name:
                  type: string
                city:
                  type: string
      responses:
        200:
          description: List organizations that match the query.
          content:
            application/json:
              schema:
                type: object

  /web/private/service-provider:
    get:
      operationId: getServiceProvider
      description: Get the information of the current service provider of the Nuts node
      responses:
        200:
          description: All the information of the current service provider.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceProvider"
    put:
      operationId: updateServiceProvider
      description: Update or create a new service provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceProvider"
      responses:
        200:
          description: The resulting created service provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceProvider"

  /web/private/service-provider/services:
    get:
      operationId: getServices
      description: Get a list of offered services by the Service Provider
      responses:
        200:
          description: Successfull response with a list of services
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Services"
    post:
      operationId: addService
      description: Add a new compound service to this service provider.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceProperties"
      responses:
        200:
          description: The newly created compound service
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"

  /web/private/service-provider/endpoints:
    get:
      operationId: getEndpoints
      description: Get a list of all endpoints
      responses:
        200:
          description: The resulting list of endoints
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Endpoints"
    post:
      operationId: registerEndpoint
      description: Register endpoint URL on service provider's DID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EndpointProperties"
      responses:
        201:
          description: The resulting created endpoint.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Endpoint"

  /web/private/service-provider/endpoints/{id}:
    parameters:
      - name: id
        in: path
        description: Endpoint id
        required: true
        example:
          - "did:nuts:123#abc"
        schema:
          type: string
    delete:
      operationId: deleteEndpoint
      responses:
        204:
          description: The endpoint has been deleted

  /web/private/credentials/issuers:
    get:
      operationId: getCredentialIssuers
      description: Get a list of credentials and their issuers sorted by trusted and untrusted issuers.
      responses:
        200:
          description: The result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialIssuers"
  /web/private/credential/{type}/issuer/{did}:
    parameters:
      - name: type
        in: path
        description: Credential type
        required: true
        example:
          - "NutsOrganizationCredential"
        schema:
          type: string
      - name: did
        in: path
        description: DID of the credential issuer
        required: true
        example:
          - "did:nuts:123"
        schema:
          type: string
    put:
      operationId: updateCredentialIssuer
      description: Update the trust status for a credential issuer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CredentialIssuer"
      responses:
        200:
          description: When the change is accepted

  /web/private/vc:
    post:
      operationId: issueVC
      description: Issue a Verifiable Credential.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssueVCRequest"
      responses:
        200:
          description: VC successfully issued.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifiableCredential'
  /web/private/vc/templates:
    get:
      operationId: getVCTemplates
      description: Retrieves the template for VCs that can be issued
      responses:
        200:
          description: VC templates returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VCTemplate'

components:
  schemas:
    CreateSessionRequest:
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: demo@nuts.nl
        password:
          type: string
    CreateSessionResponse:
      required:
        - token
      properties:
        token:
          type: string

    CustomersResponse:
      type: array
      items:
        $ref: "#/components/schemas/Customer"
    Customer:
      type: object
      description: A customer object
      required:
        - id
        - name
        - active
      properties:
        id:
          type: integer
          description: The internal customer ID.
          example: 1
        did:
          type: string
          description: The customer DID.
          example:
            "did:nuts:123"
        name:
          type: string
          description: Internal name for this customer.
        city:
          type: string
          description: Locality for this customer.
        domain:
          type: string
          description: The email domain of the care providers employees, required for logging in.
        active:
          type: boolean
          description: If a VC has been issued for this customer.

    ServiceProvider:
      type: object
      description: A service provider is a controller of other DID documents
      required:
        - id
        - name
        - phone
        - email
        - website
        - endpoint
      properties:
        id:
          description: The DID of the service provider
          type: string
          example: did:nuts:123
        name:
          description: The name of the service provider
          type: string
        phone:
          description: Number available for other service providers in the network to call in case of emergency
          type: string
        email:
          description: Email address available for other service providers in the network for getting support
          type: string
        website:
          description: Publicly reachable website address of the service provider
          type: string
        endpoint:
          description: Address of the Nuts Node endpoint which other nodes connect to, e.g. grpc://nuts.nl:5555
          type: string
    EndpointProperties:
      type: object
      required:
        - type
        - url
      properties:
        type:
          description: Type of the endpoint.
          type: string
        url:
          description: URL of the endpoint.
          type: string
    EndpointID:
      description: ID of the endpoint which is calculated on creation.
      type: object
      required:
        - id
      properties:
        id:
          type: string
    Endpoint:
      allOf:
        - $ref: "#/components/schemas/EndpointID"
        - $ref: "#/components/schemas/EndpointProperties"
    Endpoints:
      type: array
      items:
        $ref: "#/components/schemas/Endpoint"
    CredentialIssuers:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/CredentialIssuer"
    CredentialIssuer:
      type: object
      required:
        - trusted
        - serviceProvider
      properties:
        trusted:
          type: boolean
        serviceProvider:
          $ref: "#/components/schemas/ServiceProvider"
    Services:
      type: array
      items:
        $ref: "#/components/schemas/Service"
    ServiceID:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    ServiceProperties:
      type: object
      required:
        - name
        - serviceEndpoint
      properties:
        name:
          description: name of the endpoint. May be freely choosen.
          type: string
        serviceEndpoint:
          description: A map containing service references.
          example: { 'auth': 'did:nuts:1312321?type=oauth-prod' }
          type: object
    Service:
      allOf:
        - $ref: "#/components/schemas/ServiceID"
        - $ref: "#/components/schemas/ServiceProperties"
    VerifiableCredential:
      type: object
      description: A credential according to the W3C and Nuts specs.
    CredentialSubject:
      type: object
      description: Subject of a Verifiable Credential identifying the holder and expressing claims.
    VCTemplate:
      type: object
      description: A template for a VC to be issued
      required:
        - type
        - context
        - credentialSubject
      properties:
        type:
          type: string
          description: Verifiable Credential type of the template
        context:
          type: string
          description: JSON-LD context of the Verifiable Credential
        credentialSubject:
          type: object
          description: Example credential subject for the Verifiable Credential
    IssueVCRequest:
      type: object
      description: A request for issuing a new Verifiable Credential.
      required:
        - type
        - issuer
        - credentialSubject
      properties:
        "@context":
          description: |
            The resolvable context of the credentialSubject as URI. If omitted, the "https://nuts.nl/credentials/v1" context is used.
            Note: it is not needed to provide the "https://www.w3.org/2018/credentials/v1" context here.
          type: string
          example: "http://schema.org"
          default: "https://nuts.nl/credentials/v1"
        type:
          description: Type definition for the credential.
          type: string
          example: "NutsOrganizationCredential"
        issuer:
          description: DID according to Nuts specification.
          type: string
          example: "did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY"
        expirationDate:
          description: rfc3339 time string until when the credential is valid.
          type: string
          example: "2012-01-02T12:00:00Z"
        publishToNetwork:
          description: |
            If set, the node publishes this credential to the network. This is the default behaviour.
            When set to false, the caller is responsible for distributing the VC to a holder. When the issuer is
            also the holder, it then can be used to directly create a presentation (self issued).
            Note: a not published credential can still be publicaly revoked.
          type: boolean
          default: true
        visibility:
          description: |
            When publishToNetwork is true, the credential can be published publicly or privately to the holder.
            This field is mandatory if publishToNetwork is true to prevent accidents. It defaults to "private".
          type: string
          enum: [ public, private ]
          default: private
        credentialSubject:
          $ref: '#/components/schemas/CredentialSubject'