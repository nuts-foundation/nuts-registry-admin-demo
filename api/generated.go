// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /web/auth)
	CreateSession(ctx echo.Context) error

	// (PUT /web/private/credential/{type}/issuer/{did})
	UpdateCredentialIssuer(ctx echo.Context, pType string, did string) error

	// (GET /web/private/credentials/issuers)
	GetCredentialIssuers(ctx echo.Context) error

	// (POST /web/private/credentials/organizations)
	SearchOrganizations(ctx echo.Context) error

	// (GET /web/private/customers)
	GetCustomers(ctx echo.Context) error

	// (POST /web/private/customers)
	ConnectCustomer(ctx echo.Context) error

	// (GET /web/private/customers/{id})
	GetCustomer(ctx echo.Context, id string) error

	// (PUT /web/private/customers/{id})
	UpdateCustomer(ctx echo.Context, id string) error

	// (GET /web/private/service-provider)
	GetServiceProvider(ctx echo.Context) error

	// (POST /web/private/service-provider)
	CreateServiceProvider(ctx echo.Context) error

	// (PUT /web/private/service-provider)
	UpdateServiceProvider(ctx echo.Context) error

	// (POST /web/private/service-provider/endpoints)
	RegisterEndpoint(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateSession converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSession(ctx)
	return err
}

// UpdateCredentialIssuer converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCredentialIssuer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "type", runtime.ParamLocationPath, ctx.Param("type"), &pType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCredentialIssuer(ctx, pType, did)
	return err
}

// GetCredentialIssuers converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredentialIssuers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredentialIssuers(ctx)
	return err
}

// SearchOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrganizations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchOrganizations(ctx)
	return err
}

// GetCustomers converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomers(ctx)
	return err
}

// ConnectCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectCustomer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConnectCustomer(ctx)
	return err
}

// GetCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomer(ctx, id)
	return err
}

// UpdateCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCustomer(ctx, id)
	return err
}

// GetServiceProvider converts echo context to params.
func (w *ServerInterfaceWrapper) GetServiceProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServiceProvider(ctx)
	return err
}

// CreateServiceProvider converts echo context to params.
func (w *ServerInterfaceWrapper) CreateServiceProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateServiceProvider(ctx)
	return err
}

// UpdateServiceProvider converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateServiceProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateServiceProvider(ctx)
	return err
}

// RegisterEndpoint converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterEndpoint(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterEndpoint(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/web/auth", wrapper.CreateSession)
	router.PUT(baseURL+"/web/private/credential/:type/issuer/:did", wrapper.UpdateCredentialIssuer)
	router.GET(baseURL+"/web/private/credentials/issuers", wrapper.GetCredentialIssuers)
	router.POST(baseURL+"/web/private/credentials/organizations", wrapper.SearchOrganizations)
	router.GET(baseURL+"/web/private/customers", wrapper.GetCustomers)
	router.POST(baseURL+"/web/private/customers", wrapper.ConnectCustomer)
	router.GET(baseURL+"/web/private/customers/:id", wrapper.GetCustomer)
	router.PUT(baseURL+"/web/private/customers/:id", wrapper.UpdateCustomer)
	router.GET(baseURL+"/web/private/service-provider", wrapper.GetServiceProvider)
	router.POST(baseURL+"/web/private/service-provider", wrapper.CreateServiceProvider)
	router.PUT(baseURL+"/web/private/service-provider", wrapper.UpdateServiceProvider)
	router.POST(baseURL+"/web/private/service-provider/endpoints", wrapper.RegisterEndpoint)

}

