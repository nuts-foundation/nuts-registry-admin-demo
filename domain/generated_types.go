// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package domain

import (
	"encoding/json"
	"fmt"
)

// Defines values for IssueVCRequestVisibility.
const (
	IssueVCRequestVisibilityPrivate IssueVCRequestVisibility = "private"

	IssueVCRequestVisibilityPublic IssueVCRequestVisibility = "public"
)

// Defines values for VCTemplateVisibility.
const (
	VCTemplateVisibilityPrivate VCTemplateVisibility = "private"

	VCTemplateVisibilityPublic VCTemplateVisibility = "public"
)

// CreateSessionRequest defines model for CreateSessionRequest.
type CreateSessionRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// CreateSessionResponse defines model for CreateSessionResponse.
type CreateSessionResponse struct {
	Token string `json:"token"`
}

// CredentialIssuer defines model for CredentialIssuer.
type CredentialIssuer struct {
	// A service provider is a controller of other DID documents
	ServiceProvider ServiceProvider `json:"serviceProvider"`
	Trusted         bool            `json:"trusted"`
}

// CredentialIssuers defines model for CredentialIssuers.
type CredentialIssuers struct {
	AdditionalProperties map[string][]CredentialIssuer `json:"-"`
}

// Subject of a Verifiable Credential identifying the holder and expressing claims.
type CredentialSubject map[string]interface{}

// A customer object
type Customer struct {
	// If a VC has been issued for this customer.
	Active bool `json:"active"`

	// Locality for this customer.
	City *string `json:"city,omitempty"`

	// The customer DID.
	Did *string `json:"did,omitempty"`

	// The email domain of the care providers employees, required for logging in.
	Domain *string `json:"domain,omitempty"`

	// The internal customer ID.
	Id int `json:"id"`

	// Internal name for this customer.
	Name string `json:"name"`
}

// CustomersResponse defines model for CustomersResponse.
type CustomersResponse []Customer

// Endpoint defines model for Endpoint.
type Endpoint struct {
	// Embedded struct due to allOf(#/components/schemas/EndpointID)
	EndpointID `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EndpointProperties)
	EndpointProperties `yaml:",inline"`
}

// ID of the endpoint which is calculated on creation.
type EndpointID struct {
	Id string `json:"id"`
}

// EndpointProperties defines model for EndpointProperties.
type EndpointProperties struct {
	// Type of the endpoint.
	Type string `json:"type"`

	// URL of the endpoint.
	Url string `json:"url"`
}

// Endpoints defines model for Endpoints.
type Endpoints []Endpoint

// A request for issuing a new Verifiable Credential.
type IssueVCRequest struct {
	// The resolvable context of the credentialSubject as URI. If omitted, the "https://nuts.nl/credentials/v1" context is used.
	// Note: it is not needed to provide the "https://www.w3.org/2018/credentials/v1" context here.
	Context *string `json:"@context,omitempty"`

	// Subject of a Verifiable Credential identifying the holder and expressing claims.
	CredentialSubject CredentialSubject `json:"credentialSubject"`

	// rfc3339 time string until when the credential is valid.
	ExpirationDate *string `json:"expirationDate,omitempty"`

	// DID according to Nuts specification.
	Issuer string `json:"issuer"`

	// If set, the node publishes this credential to the network. This is the default behaviour.
	// When set to false, the caller is responsible for distributing the VC to a holder. When the issuer is
	// also the holder, it then can be used to directly create a presentation (self issued).
	// Note: a not published credential can still be publicaly revoked.
	PublishToNetwork *bool `json:"publishToNetwork,omitempty"`

	// Type definition for the credential.
	Type string `json:"type"`

	// When publishToNetwork is true, the credential can be published publicly or privately to the holder.
	// This field is mandatory if publishToNetwork is true to prevent accidents. It defaults to "private".
	Visibility *IssueVCRequestVisibility `json:"visibility,omitempty"`
}

// When publishToNetwork is true, the credential can be published publicly or privately to the holder.
// This field is mandatory if publishToNetwork is true to prevent accidents. It defaults to "private".
type IssueVCRequestVisibility string

// Service defines model for Service.
type Service struct {
	// Embedded struct due to allOf(#/components/schemas/ServiceID)
	ServiceID `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ServiceProperties)
	ServiceProperties `yaml:",inline"`
}

// ServiceID defines model for ServiceID.
type ServiceID struct {
	Id string `json:"id"`
}

// ServiceProperties defines model for ServiceProperties.
type ServiceProperties struct {
	// name of the endpoint. May be freely choosen.
	Name string `json:"name"`

	// A map containing service references.
	ServiceEndpoint map[string]interface{} `json:"serviceEndpoint"`
}

// A service provider is a controller of other DID documents
type ServiceProvider struct {
	// Email address available for other service providers in the network for getting support
	Email string `json:"email"`

	// Address of the Nuts Node endpoint which other nodes connect to, e.g. grpc://nuts.nl:5555
	Endpoint string `json:"endpoint"`

	// The DID of the service provider
	Id string `json:"id"`

	// The name of the service provider
	Name string `json:"name"`

	// Number available for other service providers in the network to call in case of emergency
	Phone string `json:"phone"`

	// Publicly reachable website address of the service provider
	Website string `json:"website"`
}

// Services defines model for Services.
type Services []Service

// A template for a VC to be issued
type VCTemplate struct {
	// JSON-LD context of the Verifiable Credential
	Context string `json:"context"`

	// Example credential subject for the Verifiable Credential
	CredentialSubject map[string]interface{} `json:"credentialSubject"`

	// Whether to publish the VC on the Nuts network after issuance.
	PublishToNetwork bool `json:"publishToNetwork"`

	// Verifiable Credential type of the template
	Type string `json:"type"`

	// Visibility of the VC when publishing on the network.
	Visibility VCTemplateVisibility `json:"visibility"`
}

// Visibility of the VC when publishing on the network.
type VCTemplateVisibility string

// A credential according to the W3C and Nuts specs.
type VerifiableCredential map[string]interface{}

// CreateSessionJSONBody defines parameters for CreateSession.
type CreateSessionJSONBody CreateSessionRequest

// UpdateCredentialIssuerJSONBody defines parameters for UpdateCredentialIssuer.
type UpdateCredentialIssuerJSONBody CredentialIssuer

// ConnectCustomerJSONBody defines parameters for ConnectCustomer.
type ConnectCustomerJSONBody Customer

// UpdateCustomerJSONBody defines parameters for UpdateCustomer.
type UpdateCustomerJSONBody Customer

// EnableCustomerServiceJSONBody defines parameters for EnableCustomerService.
type EnableCustomerServiceJSONBody struct {
	// The did wich contains the referenced service.
	Did  string `json:"did"`
	Type string `json:"type"`
}

// SearchOrganizationsJSONBody defines parameters for SearchOrganizations.
type SearchOrganizationsJSONBody struct {
	City string `json:"city"`
	Name string `json:"name"`
}

// UpdateServiceProviderJSONBody defines parameters for UpdateServiceProvider.
type UpdateServiceProviderJSONBody ServiceProvider

// RegisterEndpointJSONBody defines parameters for RegisterEndpoint.
type RegisterEndpointJSONBody EndpointProperties

// AddServiceJSONBody defines parameters for AddService.
type AddServiceJSONBody ServiceProperties

// IssueVCJSONBody defines parameters for IssueVC.
type IssueVCJSONBody IssueVCRequest

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody CreateSessionJSONBody

// UpdateCredentialIssuerJSONRequestBody defines body for UpdateCredentialIssuer for application/json ContentType.
type UpdateCredentialIssuerJSONRequestBody UpdateCredentialIssuerJSONBody

// ConnectCustomerJSONRequestBody defines body for ConnectCustomer for application/json ContentType.
type ConnectCustomerJSONRequestBody ConnectCustomerJSONBody

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody UpdateCustomerJSONBody

// EnableCustomerServiceJSONRequestBody defines body for EnableCustomerService for application/json ContentType.
type EnableCustomerServiceJSONRequestBody EnableCustomerServiceJSONBody

// SearchOrganizationsJSONRequestBody defines body for SearchOrganizations for application/json ContentType.
type SearchOrganizationsJSONRequestBody SearchOrganizationsJSONBody

// UpdateServiceProviderJSONRequestBody defines body for UpdateServiceProvider for application/json ContentType.
type UpdateServiceProviderJSONRequestBody UpdateServiceProviderJSONBody

// RegisterEndpointJSONRequestBody defines body for RegisterEndpoint for application/json ContentType.
type RegisterEndpointJSONRequestBody RegisterEndpointJSONBody

// AddServiceJSONRequestBody defines body for AddService for application/json ContentType.
type AddServiceJSONRequestBody AddServiceJSONBody

// IssueVCJSONRequestBody defines body for IssueVC for application/json ContentType.
type IssueVCJSONRequestBody IssueVCJSONBody

// Getter for additional properties for CredentialIssuers. Returns the specified
// element and whether it was found
func (a CredentialIssuers) Get(fieldName string) (value []CredentialIssuer, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CredentialIssuers
func (a *CredentialIssuers) Set(fieldName string, value []CredentialIssuer) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]CredentialIssuer)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CredentialIssuers to handle AdditionalProperties
func (a *CredentialIssuers) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]CredentialIssuer)
		for fieldName, fieldBuf := range object {
			var fieldVal []CredentialIssuer
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CredentialIssuers to handle AdditionalProperties
func (a CredentialIssuers) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
