// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package domain

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// ConnectCustomerRequest defines model for ConnectCustomerRequest.
type ConnectCustomerRequest struct {

	// Used for issueing the NutsOrgCredential
	City *string `json:"city,omitempty"`
	Id   string  `json:"id"`
	Name string  `json:"name"`
}

// CreateSessionRequest defines model for CreateSessionRequest.
type CreateSessionRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// CreateSessionResponse defines model for CreateSessionResponse.
type CreateSessionResponse struct {
	Token string `json:"token"`
}

// CredentialIssuer defines model for CredentialIssuer.
type CredentialIssuer struct {

	// A service provider is a controller of other DID documents
	ServiceProvider ServiceProvider `json:"serviceProvider"`
	Trusted         bool            `json:"trusted"`
}

// CredentialIssuers defines model for CredentialIssuers.
type CredentialIssuers struct {
	AdditionalProperties map[string][]CredentialIssuer `json:"-"`
}

// A customer object
type Customer struct {

	// If a VC has been issued for this customer.
	Active bool `json:"active"`

	// Locality for this customer.
	City *string `json:"city,omitempty"`

	// The customer DID.
	Did string `json:"did"`

	// The email domain of the care providers employees, required for logging in.
	Domain *string `json:"domain,omitempty"`

	// The internal customer ID.
	Id string `json:"id"`

	// Internal name for this customer.
	Name string `json:"name"`
}

// CustomersResponse defines model for CustomersResponse.
type CustomersResponse []Customer

// Endpoint defines model for Endpoint.
type Endpoint struct {
	// Embedded struct due to allOf(#/components/schemas/EndpointID)
	EndpointID `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EndpointProperties)
	EndpointProperties `yaml:",inline"`
}

// ID of the endpoint which is calculated on creation.
type EndpointID struct {
	Id string `json:"id"`
}

// EndpointProperties defines model for EndpointProperties.
type EndpointProperties struct {

	// Type of the endpoint.
	Type string `json:"type"`

	// URL of the endpoint.
	Url string `json:"url"`
}

// Endpoints defines model for Endpoints.
type Endpoints []Endpoint

// A service provider is a controller of other DID documents
type ServiceProvider struct {

	// Email address available for other service providers in the network for getting support
	Email string `json:"email"`

	// The DID of the service provider
	Id string `json:"id"`

	// The name of the service provider
	Name string `json:"name"`

	// Number available for other service providers in the network to call in case of emergency
	Phone string `json:"phone"`

	// Publicly reachable website address of the service provider
	Website string `json:"website"`
}

// CreateSessionJSONBody defines parameters for CreateSession.
type CreateSessionJSONBody CreateSessionRequest

// UpdateCredentialIssuerJSONBody defines parameters for UpdateCredentialIssuer.
type UpdateCredentialIssuerJSONBody CredentialIssuer

// ConnectCustomerJSONBody defines parameters for ConnectCustomer.
type ConnectCustomerJSONBody ConnectCustomerRequest

// UpdateCustomerJSONBody defines parameters for UpdateCustomer.
type UpdateCustomerJSONBody struct {
	Active bool    `json:"active"`
	City   *string `json:"city,omitempty"`
	Name   string  `json:"name"`
}

// SearchOrganizationsJSONBody defines parameters for SearchOrganizations.
type SearchOrganizationsJSONBody struct {
	City string `json:"city"`
	Name string `json:"name"`
}

// UpdateServiceProviderJSONBody defines parameters for UpdateServiceProvider.
type UpdateServiceProviderJSONBody ServiceProvider

// RegisterEndpointJSONBody defines parameters for RegisterEndpoint.
type RegisterEndpointJSONBody EndpointProperties

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody CreateSessionJSONBody

// UpdateCredentialIssuerJSONRequestBody defines body for UpdateCredentialIssuer for application/json ContentType.
type UpdateCredentialIssuerJSONRequestBody UpdateCredentialIssuerJSONBody

// ConnectCustomerJSONRequestBody defines body for ConnectCustomer for application/json ContentType.
type ConnectCustomerJSONRequestBody ConnectCustomerJSONBody

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody UpdateCustomerJSONBody

// SearchOrganizationsJSONRequestBody defines body for SearchOrganizations for application/json ContentType.
type SearchOrganizationsJSONRequestBody SearchOrganizationsJSONBody

// UpdateServiceProviderJSONRequestBody defines body for UpdateServiceProvider for application/json ContentType.
type UpdateServiceProviderJSONRequestBody UpdateServiceProviderJSONBody

// RegisterEndpointJSONRequestBody defines body for RegisterEndpoint for application/json ContentType.
type RegisterEndpointJSONRequestBody RegisterEndpointJSONBody

// Getter for additional properties for CredentialIssuers. Returns the specified
// element and whether it was found
func (a CredentialIssuers) Get(fieldName string) (value []CredentialIssuer, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CredentialIssuers
func (a *CredentialIssuers) Set(fieldName string, value []CredentialIssuer) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]CredentialIssuer)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CredentialIssuers to handle AdditionalProperties
func (a *CredentialIssuers) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]CredentialIssuer)
		for fieldName, fieldBuf := range object {
			var fieldVal []CredentialIssuer
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CredentialIssuers to handle AdditionalProperties
func (a CredentialIssuers) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
